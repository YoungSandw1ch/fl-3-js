{"mappings":"YAAe,SAAAA,EAAsCC,EAAUC,EAAYC,GACzE,IAAKD,EAAWE,IAAIH,GAClB,MAAM,IAAII,UAAU,gBAAkBF,EAAS,kCAEjD,OAAOD,EAAWI,IAAIL,E,CCJT,SAAAM,EAAoCC,EAAKC,GACtD,GAAIA,EAAkBL,IAAII,GACxB,MAAM,IAAIH,UAAU,iE,CCAT,SAAAK,EAAgCF,EAAKN,EAAYS,GAC9DJ,EAA2BC,EAAKN,GAChCA,EAAWU,IAAIJ,EAAKG,E,CCJP,SAAAE,EAAkCZ,EAAUa,EAAYH,GACrE,GAAIG,EAAWF,IACbE,EAAWF,IAAIG,KAAKd,EAAUU,OACzB,CACL,IAAKG,EAAWE,SAId,MAAM,IAAIX,UAAU,4CAEtBS,EAAWH,MAAQA,C,ECPR,SAAAM,EAA+BhB,EAAUC,EAAYS,GAGlE,OADAE,EAAwBZ,EADPD,EAA4BC,EAAUC,EAAY,OACrBS,GACvCA,C,CCJT,MAAMO,EAAO,CACXC,SAAUC,SAASC,cAAc,6BACjCC,SAAUF,SAASC,cAAc,6BACjCE,QAASH,SAASC,cAAc,4BAChCG,SAAUJ,SAASC,cAAc,6BACjCI,MAAOL,SAASC,cAAc,c,IAK9BK,EAAS,IAAAC,QAiDX,MAAMC,EAAQ,IAlDd,MAUEC,QClBa,IAA+B5B,GCH/B,SAAkCA,EAAUa,GACzD,OAAIA,EAAWR,IACNQ,EAAWR,IAAIS,KAAKd,GAEtBa,EAAWH,K,EDCX,CAFqCV,EDmBtC6B,KClBW9B,EAA4BC,EDkBjCyB,EClBuD,U,ODoB3DA,GAAW,GACjBI,KAAKC,QAAUC,aAAY,KACzBF,KAAKG,MAAQ,EACb,MAAMC,EAAaJ,KAAKK,aAAaL,KAAKG,MAC1CG,QAAQC,IAAIH,GACZJ,KAAKQ,YAAYJ,EAAW,GAC3B,K,CAGLK,OACEC,cAAcV,KAAKC,S,OACbL,GAAW,GACjBI,KAAKG,KAAO,C,CAGdQ,QACED,cAAcV,KAAKC,S,OACbL,GAAW,E,CAGnBgB,QACEZ,KAAKS,OACLT,KAAKQ,YAAYR,KAAKK,aAAa,G,CAGrCQ,IAAIhC,GACF,OAAOiC,OAAOjC,GAAOkC,SAAS,EAAG,I,CAGnCV,aAAaW,GAIX,MAAO,C,KAHMhB,KAAKa,IAAII,KAAKC,MAAMF,EAAM,KAAY,K,IACvChB,KAAKa,IAAII,KAAKC,MAAMF,EAAM,KAAY,K,IACtChB,KAAKa,IAAII,KAAKC,MAAMF,EAAI,K,CA1CtCG,YAAYX,GAFZ5B,EAAAoB,KAAAJ,EAAS,C,uBAAT,IAGEI,KAAKQ,YAAcA,E,OACbZ,GAAW,GACjBI,KAAKC,QAAU,KACfD,KAAKG,KAAO,C,IAkDhB,UAAqBiB,KAAEA,EAAIC,IAAEA,EAAGC,IAAEA,IAChClC,EAAKO,MAAM4B,YAAc,GAAGH,KAAQC,KAAOC,G,IAN7ClC,EAAKC,SAASmC,iBAAiB,QAAS1B,EAAMC,MAAM0B,KAAK3B,IACzDV,EAAKK,QAAQ+B,iBAAiB,QAAS1B,EAAMW,KAAKgB,KAAK3B,IACvDV,EAAKM,SAAS8B,iBAAiB,QAAS1B,EAAMc,MAAMa,KAAK3B,IACzDV,EAAKI,SAASgC,iBAAiB,QAAS1B,EAAMa,MAAMc,KAAK3B,G","sources":["node_modules/@swc/helpers/src/_class_extract_field_descriptor.mjs","node_modules/@swc/helpers/src/_check_private_redeclaration.mjs","node_modules/@swc/helpers/src/_class_private_field_init.mjs","node_modules/@swc/helpers/src/_class_apply_descriptor_set.mjs","node_modules/@swc/helpers/src/_class_private_field_set.mjs","src/js/05-timer.js","node_modules/@swc/helpers/src/_class_private_field_get.mjs","node_modules/@swc/helpers/src/_class_apply_descriptor_get.mjs"],"sourcesContent":["export default function _classExtractFieldDescriptor(receiver, privateMap, action) {\n  if (!privateMap.has(receiver)) {\n    throw new TypeError(\"attempted to \" + action + \" private field on non-instance\");\n  }\n  return privateMap.get(receiver);\n}\n","export default function _checkPrivateRedeclaration(obj, privateCollection) {\n  if (privateCollection.has(obj)) {\n    throw new TypeError(\"Cannot initialize the same private elements twice on an object\");\n  }\n}\n","import _checkPrivateRedeclaration from \"./_check_private_redeclaration.mjs\";\n\nexport default function _classPrivateFieldInit(obj, privateMap, value) {\n  _checkPrivateRedeclaration(obj, privateMap);\n  privateMap.set(obj, value);\n}\n","export default function _classApplyDescriptorSet(receiver, descriptor, value) {\n  if (descriptor.set) {\n    descriptor.set.call(receiver, value);\n  } else {\n    if (!descriptor.writable) {\n      // This should only throw in strict mode, but class bodies are\n      // always strict and private fields can only be used inside\n      // class bodies.\n      throw new TypeError(\"attempted to set read only private field\");\n    }\n    descriptor.value = value;\n  }\n}\n","import classExtractFieldDescriptor from './_class_extract_field_descriptor.mjs';\nimport classApplyDescriptorSet from './_class_apply_descriptor_set.mjs';\n\nexport default function _classPrivateFieldSet(receiver, privateMap, value) {\n  var descriptor = classExtractFieldDescriptor(receiver, privateMap, \"set\");\n  classApplyDescriptorSet(receiver, descriptor, value);\n  return value;\n}\n","import '../css/timer.css';\n\nconst refs = {\n  startBtn: document.querySelector('button[data-action-start]'),\n  pauseBtn: document.querySelector('button[data-action-pause]'),\n  stopBtn: document.querySelector('button[data-action-stop]'),\n  resetBtn: document.querySelector('button[data-action-reset]'),\n  timer: document.querySelector('.js-timer'),\n};\n\n//=========обычный таймер без использования Date================\nclass Timer {\n  #isActive;\n\n  constructor(renderTimer) {\n    this.renderTimer = renderTimer;\n    this.#isActive = false;\n    this.timerId = null;\n    this.time = 0;\n  }\n\n  start() {\n    if (this.#isActive) return;\n\n    this.#isActive = true;\n    this.timerId = setInterval(() => {\n      this.time += 1;\n      const timeObject = this.secondToTime(this.time);\n      console.log(timeObject);\n      this.renderTimer(timeObject);\n    }, 1000);\n  }\n\n  stop() {\n    clearInterval(this.timerId);\n    this.#isActive = false;\n    this.time = 0;\n  }\n\n  pause() {\n    clearInterval(this.timerId);\n    this.#isActive = false;\n  }\n\n  reset() {\n    this.stop();\n    this.renderTimer(this.secondToTime(0));\n  }\n\n  pad(value) {\n    return String(value).padStart(2, '0');\n  }\n\n  secondToTime(s) {\n    const hour = this.pad(Math.floor((s / (60 * 60)) % 24));\n    const min = this.pad(Math.floor((s % (60 * 60)) / 60));\n    const sec = this.pad(Math.floor(s % 60));\n    return { hour, min, sec };\n  }\n}\n\nconst timer = new Timer(renderTimer);\n\nrefs.startBtn.addEventListener('click', timer.start.bind(timer));\nrefs.stopBtn.addEventListener('click', timer.stop.bind(timer));\nrefs.resetBtn.addEventListener('click', timer.reset.bind(timer));\nrefs.pauseBtn.addEventListener('click', timer.pause.bind(timer));\n\nfunction renderTimer({ hour, min, sec }) {\n  refs.timer.textContent = `${hour}:${min}:${sec}`;\n}\n\n//================================================================\n// function secondToStringTimer(time) {\n//   const hour = pad(Math.floor((time / (60 * 60 * 1000)) % 24));\n//   const min = pad(Math.floor(((time / 1000) % (60 * 60)) / 60));\n//   const sec = pad(Math.floor(time / 1000) % 60);\n//   return { hour, min, sec };\n// }\n\n// function pad(value) {\n//   return String(value).padStart(2, '0');\n// }\n\n// renderTimer(secondToStringTimer(423565235));\n//================================================================\n\n// class Timer {\n//   #isActive;\n\n//   constructor(renderTimer) {\n//     this.renderTimer = renderTimer;\n//     this.#isActive = false;\n//     this.time = 0;\n//     this.timerId = null;\n//     this.pauseId = null;\n//     this.currentTime = 0;\n//     this.pauseTime = 0;\n//     this.init();\n//   }\n\n//   init() {\n//     const time = this.secondToStringTimer(0);\n//     this.renderTimer(time);\n//   }\n\n//   start() {\n//     if (this.#isActive) return;\n\n//     const startTime = this.currentTime || Date.now();\n\n//     this.#isActive = true;\n\n//     this.timerId = setInterval(() => {\n//       this.currentTime = this.pauseTime\n//         ? Date.now() - (this.pauseTime - startTime)\n//         : Date.now();\n//       this.time = this.secondToStringTimer(this.currentTime - startTime);\n\n//       this.renderTimer(this.time);\n//     }, 1000);\n\n//     if (this.pauseId) {\n//       clearInterval(this.pauseId);\n//       this.pauseId = null;\n//     }\n//   }\n\n//   stop() {\n//     clearInterval(this.timerId);\n//     this.time = 0;\n//     this.#isActive = false;\n//     this.currentTime = 0;\n//     this.init();\n//   }\n\n//   pause() {\n//     clearInterval(this.timerId);\n//     this.#isActive = false;\n\n//     this.pauseId = setInterval(() => {\n//       this.pauseTime = Date.now();\n//     }, 1000);\n//   }\n\n//   reset() {\n//     this.time = 0;\n//   }\n\n//   pad(value) {\n//     return String(value).padStart(2, '0');\n//   }\n\n//   secondToStringTimer(time) {\n//     const hour = this.pad(Math.floor((time / (60 * 60 * 1000)) % 24));\n//     const min = this.pad(Math.floor(((time / 1000) % (60 * 60)) / 60));\n//     const sec = this.pad(Math.floor(time / 1000) % 60);\n//     return { hour, min, sec };\n//   }\n// }\n","import classExtractFieldDescriptor from './_class_extract_field_descriptor.mjs';\nimport classApplyDescriptorGet from './_class_apply_descriptor_get.mjs';\n\nexport default function _classPrivateFieldGet(receiver, privateMap) {\n  var descriptor = classExtractFieldDescriptor(receiver, privateMap, \"get\");\n  return classApplyDescriptorGet(receiver, descriptor);\n}\n","export default function _classApplyDescriptorGet(receiver, descriptor) {\n  if (descriptor.get) {\n    return descriptor.get.call(receiver);\n  }\n  return descriptor.value;\n}\n"],"names":["$99d26d6ae153323e$export$2e2bcd8739ae039","receiver","privateMap","action","has","TypeError","get","$dba1998b20ced464$export$2e2bcd8739ae039","obj","privateCollection","$7efc65a322f137af$export$2e2bcd8739ae039","value","set","$dac75875e16c3833$export$2e2bcd8739ae039","descriptor","call","writable","$9a4dad1b7a0c1382$export$2e2bcd8739ae039","$31c072714f8e37b4$var$refs","startBtn","document","querySelector","pauseBtn","stopBtn","resetBtn","timer","$31c072714f8e37b4$var$_isActive","WeakMap","$31c072714f8e37b4$var$timer","start","this","timerId","setInterval","time","timeObject","secondToTime","console","log","renderTimer","stop","clearInterval","pause","reset","pad","String","padStart","s","Math","floor","constructor","hour","min","sec","textContent","addEventListener","bind"],"version":3,"file":"05-timer.69b8f2c6.js.map"}